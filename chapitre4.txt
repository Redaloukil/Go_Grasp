Introduction : 

Le problème du voyageur du commerce a de nombreuses applications, et a d'ailleurs été motivé par des problèmes concrets, par exemple le parcours des bus scolaires.
Un premier type d'application classique est bien sûr dans la logistique, par exemple pour la poste, la distribution de repas à domicile, l'inspection d'installation, etc25. On peut aussi optimiser les mouvements de machines, par exemple, pour minimiser le temps total que met une fraiseuse à commande numérique pour percer n points dans une plaque de tôle26, ou minimiser les mouvements des grands télescopes (qui sont très lents)25.
On peut citer des applications plus surprenantes, par exemple : en biologie, le problème aide au séquençage du génome (pour relier des petits fragments en des chaînes plus grandes), et en production il est utilisé pour le test des circuits imprimés.

On s'interesse dans ce chapitre a conceptualiser une application web ( web service ) afin de resourdre le problem du voyageur de commerce pour le but d'optimiser le chemin d'un livreur et accelrer le temps de reponse du web service recevant le requette de chercher le chemin le cycle hamiltonien d'un ensemble de point donnés.

Conception et Scénario : 



Le choix du langage de programation : 

Le langage de programmation Go, développé par Google à partir d'un concept initial de Robert Griesemer, Rob Pike et Ken Thompson existe déjà depuis plus de huit ans. Il a été créé à la base pour des besoins internes mais il a évolué très rapidement afin de devenir un véritable langage de programmation largement utilisé pour certains des projets de cloud les plus importants au monde.

Le langage Go est également un projet open source depuis 2009 distribué sous licence BSD pour rendre les programmeurs plus productifs. Go est un langage de programmation expressif, concis, propre et efficace. Il compte aujourd'hui une grande communauté très active.

Dans cet article nous allons examiner les différentes caractéristiques de ce langage, comment il diffère des autres langages, quel type de projets est le plus approprié pour son utilisation, les cas d'utilisation optimale, les éléments manquants, les limitations et l'avenir de ce langage.

Go, souvent appelé Golang, a été développé par Google mais ce n'est pas un projet strictement Google. C'est un projet open source axé sur la communauté et ses dirigeants ont une vision claire et une opinion forte sur la façon dont Go devrait être utilisé et comment il doit évoluer.

Go vise à être simple, logique et facile à lire par d'autres développeurs. Go n'a pas un grand jeu de fonctionnalités, en particulier par rapport aux langages comme C++. Go semble être en syntaxe C, ce qui rend le langage relativement facile à comprendre par les développeurs C. Cela dit, de nombreuses fonctionnalités de Go, en particulier les fonctionnalités de programmation fonctionnelle et son approche de la programmation distribuée, rappelle des langages comme Erlang.

Un langage performant

La documentation de Go le décrit comme un langage compilé avec un typage statique qui ressemble à un langage interprété avec un typage dynamique. Même un programme Go volumineux est compilé en quelques secondes. En plus, il réduit considérablement des choses que l'on trouve en C comme les fichiers et les bibliothèques. C'est un langage de programmation statique. Ce que cela signifie est que le compilateur veut toujours savoir quel est le type pour chaque valeur dans le programme. Lorsque le compilateur connaît les informations de type à l'avance, il peut aider à s'assurer que le programme fonctionne correctement avec les valeurs. Cela permet de réduire la corruption et les bugs de mémoire potentiels et offre au compilateur la possibilité de produire plus de code performant. Go struct vous permet de créer vos propres types en combinant un ou plusieurs types, y compris des types intégrés et définis par l'utilisateur. Les structures sont la seule façon de créer des types concrets définis par l'utilisateur dans Go. Lorsque vous créez vos propres types à l'aide de struct, il est important de comprendre que Go ne prend pas en charge l'héritage dans son système de types, mais favorise la composition des types qui permettent de créer des types plus volumineux en combinant des types plus petits. La philosophie de conception de Go est de créer des composants plus grands en combinant des composants plus petits et modulaires. Si vous êtes un programmeur pragmatique, vous apprécierez la philosophie de conception de Go qui favorise la composition par rapport à l'héritage en raison de ses avantages pratiques. L'héritage des types introduit parfois des défis pratiques en matière de maintenabilité.

Go rend le travail d'un développeur plus facile de plusieurs façons:

Commodité

Go est parfois comparé à un langage de script comme Python car il répond à énormement de besoins de programmation. Certaines fonctionnalités sont intégrées dans le langage lui-même, telles que les routines de programmation distribuées et le multithreading, et d'autres modules complémentaires se trouvent dans les bibliothèques Google par défaut, telles que le paquet http de Go. Comme Python, Go fournit automatiquement la gestion de la mémoire.

Mais contrairement à un langage de script comme Python, Go est compilé en binaire natif. Et contrairement à C ou C ++, Go compile si rapidement qu'il ressemble plus à un langage de script qu'à un langage de compilé. Et le système de build est moins compliqué que celui de la plupart des langages de compilés.

Vitesse

Les binaires Go fonctionnent moins vite que le code C, mais la différence est négligeable pour la plupart des applications. Pour la plupart des projets, la performance de Go est aussi pratique que C, et elle est généralement plus rapide que les autres langages connus pour un développement fluide, comme JavaScript, Python et Ruby.

Portabilité

Les exécutables configurés avec la toolchain Go peuvent fonctionner seuls, sans dépendance externe. La toolchain Go est disponible pour une large gamme de systèmes d'exploitation et de plateformes matérielles et peut être utilisée pour créer des binaires fonctionnant sur différentes plateformes.

Interopérabilité

Les programmes Go peuvent communiquer avec des bibliothèques C externes ou créer des appels systèmes natifs.

Concurrence

De nos jours, nous mettons fortement à profit les plateformes cloud pour construire et exécuter des applications où les serveurs sur le cloud ont plus de puissance. Bien que les ordinateurs modernes et les instances de machines virtuelles sur le cloud aient plus de puissance et de nombreux cœurs de processeur, nous ne pouvons toujours pas exploiter la puissance des ordinateurs modernes en utilisant la plupart des langages de programmation et des outils existants. La concurrence dans Go est la capacité des fonctions à s'exécuter indépendamment l'une de l'autre. Ses mécanismes de concurrence facilitent l'écriture de programmes qui tirent le meilleur parti des machines multi-cœurs et en réseau, tandis que son système de type novateur permet une construction de programme flexible et modulaire. Lorsqu'une fonction est créée en tant que "goroutine", elle est traitée comme une unité de travail indépendante qui est planifiée puis exécutée sur un processeur logique disponible. Les "goroutines" sont créées en appelant l'instruction Go suivie de la fonction ou de la méthode que vous voulez exécuter en tant qu'activité autonome. Le planificateur d'exécution Go est un logiciel sophistiqué qui gère tous les "goroutines" qui sont créés et qui ont besoin de temps processeur. Le planificateur se trouve au sommet du système d'exploitation, liant les threads du système d'exploitation aux processeurs logiques qui, à leur tour, exécutent les routines. Le programmateur contrôle tout ce qui concerne les "goroutines" en cours d'exécution sur quels processeurs logiques à un moment donné.

Support

La toolchain Go est disponible sous Linux, MacOS ou Windows sous la forme d'un conteneur binaire ou docker. Go est également ajouté aux distributions Linux populaires comme RHEL et Fedora, ce qui facilite l'utilisation de Go sur ces plates-formes. La prise en charge de Go se poursuit dans les environnements de développement tiers, depuis le code Microsoft Visual Studio jusqu'à l'IDE Komodo d’ActiveState.

Documentation

Go excelle vraiment quand il s'agit de documenter votre propre code. Il existe un moyen standard de documenter toutes vos fonctions et bibliothèques, ainsi que d'utiliser les bons outils au bon moment. Vous obtenez même des avertissements lorsque vous écrivez des fonctions sans documentation.
Quand utiliser Go

Aucun langage n'est approprié pour chaque tâche, mais certains sont plus volumineux que d'autres. Go fonctionne mieux pour un certain nombre de types d'applications:

Services réseau

Les applications réseau sont toutes basées sur la programmation distribuée, et les fonctions natives de Go sont parfaitement adaptées à ce travail. Par conséquent, il existe de nombreux projets de réseau, des services distribués et de cloud: API, serveurs Web, frameworks pour les applications Web et autres.

Cloud

Les caractéristiques de Go, que nous avons cité plus haut, et son degré de portabilité rendent ce langage très approprié pour développer des applications de Cloud. Go a même été utilisé pour développer une des applications actuelles les plus connues, le logiciel de conteneurisation Docker. C'est l'une des raisons pour lesquelles Docker choisit Go et l'une des raisons pour laquelle Go continue de gagner en popularité à mesure que le cloud devient de plus en plus dominant.